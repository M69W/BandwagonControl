package xyz.yxwzyyk.bandwagoncontrol.app

import android.content.Context

import com.google.android.gms.analytics.GoogleAnalytics
import com.google.android.gms.analytics.Tracker

import java.util.HashMap

import xyz.yxwzyyk.bandwagoncontrol.R

/**
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * `AnalyticsTrackers.getInstance().get(...)`
 *
 *
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 *
 *
 * TODO: Call [.initialize] from an entry point in your app
 * before using this!
 */
class AnalyticsTrackers
/**
 * Don't instantiate directly - use [.getInstance] instead.
 */
private constructor(context: Context) {

    enum class Target {
        APP
        // Add more trackers here if you need, and update the code in #get(Target) below
    }

    private val mTrackers = HashMap<Target, Tracker>()
    private val mContext: Context

    init {
        mContext = context.applicationContext
    }

    @Synchronized operator fun get(target: Target): Tracker {
        if (!mTrackers.containsKey(target)) {
            val tracker: Tracker
            when (target) {
                AnalyticsTrackers.Target.APP -> {
                    tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker)
                    tracker.enableAdvertisingIdCollection(true)
                }
                else -> throw IllegalArgumentException("Unhandled analytics target " + target)
            }
            mTrackers.put(target, tracker)
        }

        return mTrackers[target]!!
    }

    companion object {

        private var sInstance: AnalyticsTrackers? = null

        @Synchronized fun initialize(context: Context) {
            if (sInstance != null) {
                throw IllegalStateException("Extra call to initialize analytics trackers")
            }

            sInstance = AnalyticsTrackers(context)
        }

        val instance: AnalyticsTrackers
            @Synchronized get() {
                if (sInstance == null) {
                    throw IllegalStateException("Call initialize() before getInstance()")
                }

                return sInstance as AnalyticsTrackers
            }
    }
}
